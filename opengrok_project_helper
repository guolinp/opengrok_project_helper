#!/usr/bin/python


import os
import sys
import json


def usage(program):
    print("\nUsage: {} MODULE COMMAND [OPTIONS]\n".format(program))
    print("    project create <project_name> <host_port>")
    print("    project remove <project_name>")
    print("    project index <project_name>")
    print("    project list")
    print("    container start <container_name> <project_name>")
    print("    container kill <container_name>")
    print("    container list")


def shell_run(cmd_str):
    return ''.join(os.popen(cmd_str).readlines()).strip()


def run_module_cmd(cmd_dict, module, argv):
    if len(argv) == 0:
        print("ERROR: module {} command missing".format(module))
        return False
    cmd_name = argv[0]
    cmd_fn = cmd_dict.get(cmd_name)
    if cmd_fn is None:
        print("ERROR: module {} does not support command: {}".format(module, cmd_name))
        return False
    return cmd_fn(argv[1:])


def base_dir():
    return os.path.abspath(os.path.dirname(sys.argv[0]))


def project_dir(project_name):
    return os.path.join(base_dir(), project_name)


def project_work_dir(project_name, dirname):
    return os.path.join(project_dir(project_name), dirname)


def project_db_dir():
    return os.path.join(base_dir(), ".db")


def project_db_pathname(project_name):
    return os.path.join(project_db_dir(), "{}.json".format(project_name))


def project_load_db(project_name):
    db_pathname = project_db_pathname(project_name)
    try:
        fp = open(db_pathname)
        db = json.load(fp)
    except:
        db = {}
    return db


def project_save_db(project_name, db):
    if not os.path.exists(project_db_dir()):
        os.mkdir(project_db_dir())
    try:
        fp = open(project_db_pathname(project_name), 'w')
        json.dump(db, fp)
        fp.close()
    except:
        print("ERROR: save project db failed, db={}".format(db))
        return False
    return True


def project_exists(project_name):
    db_pathname = project_db_pathname(project_name)
    if not os.path.exists(db_pathname):
        return False
    db = project_load_db(project_name)
    if len(db) == 0:
        return False
    if db.get("name") is None:
        return False
    if db.get("port") is None:
        return False
    return True


def project_create_work_dirs(project_name):
    shell_run("mkdir -p {}".format(project_dir(project_name)))
    shell_run("mkdir -p {}".format(project_work_dir(project_name, "source")))
    shell_run("mkdir -p {}".format(project_work_dir(project_name, "data")))
    shell_run("mkdir -p {}".format(project_work_dir(project_name, "hack")))


def project_cmd_create(argv):
    if len(argv) < 2:
        print("ERROR: project arguments missing")
        return False
    project_name = argv[0]
    host_port = argv[1]
    if project_exists(project_name):
        print("ERROR: project {} exists".format(project_name))
        return False
    project_remove(project_name)
    project_create_work_dirs(project_name)
    db = {"name": project_name, "port": host_port}
    if project_save_db(project_name, db):
        if project_exists(project_name):
            return True
    return False


def project_remove_db(project_name):
    db_pathname = project_db_pathname(project_name)
    if os.path.exists(db_pathname):
        shell_run("rm -rf {}".format(db_pathname))


def project_remove_work_dirs(project_name):
    shell_run("rm -rf {}".format(project_dir(project_name)))


def project_remove(project_name):
    project_remove_db(project_name)
    project_remove_work_dirs(project_name)


def project_cmd_remove(argv):
    if len(argv) == 0:
        print("ERROR: project name missing")
        return False
    project_name = argv[0]
    project_remove(project_name)
    return True


def project_cmd_index(argv):
    if len(argv) == 0:
        print("ERROR: project name missing")
        return False
    project_name = argv[0]
    cmd_str = "docker exec {} /scripts/index.sh".format(project_name)
    output = shell_run(cmd_str)
    print(output)
    return True


def project_cmd_list(argv):
    project_names = []
    for root, dirs, files in os.walk(project_db_dir()):
        for f in files:
            project_names.append(f.split(".")[0])
    print("project list")
    for project_name in project_names:
        db = project_load_db(project_name)
        if len(db):
            print("  name: {:<16}  port: {:<8}".format(db["name"], db["port"]))
        else:
            print("  name: {:<16}  db is invalid".format(db["name"]))
    return True


def project_module(argv):
    command_fn = {"create": project_cmd_create, "remove": project_cmd_remove, "index": project_cmd_index, "list": project_cmd_list}
    return run_module_cmd(command_fn, "project", argv)


def container_cmd_start(argv):
    if len(argv) < 2:
        print("ERROR: container arguments missing")
        return False
    container_name = argv[0]
    project_name = argv[1]

    if not project_exists(project_name):
        print("ERROR: project {} does not exist".format(project_name))
        return False

    db = project_load_db(project_name)
    if len(db) == 0 or db.get("name") is None or db.get("port") is None:
        print("ERROR: project {} db is invalid".format(project_name))
        return False

    name = "--name {}".format(container_name)
    volumes = "-v {}:/src".format(project_work_dir(project_name, "source"))
    volumes += " -v {}:/data".format(project_work_dir(project_name, "data"))
    volumes += " -v {}:/hack".format(project_work_dir(project_name, "hack"))
    ports = "-p {}:8080".format(db.get("port"))
    image = "panguolin/opengrok"

    cmd_str = "docker run -d {} {} {} {}".format(name, volumes, ports, image)
    output = shell_run(cmd_str)
    print(output)

    return True


def container_cmd_kill(argv):
    if len(argv) == 0:
        print("ERROR: container name missing")
        return False
    container_name = argv[0]
    cmd_str = "docker kill {} && docker rm {}".format(container_name, container_name)
    output = shell_run(cmd_str)
    # print(output)
    return True


def container_cmd_list(argv):
    cmd_str = "docker ps | grep -E 'CONTAINER|opengrok'"
    output = shell_run(cmd_str)
    print(output)
    return True


def container_module(argv):
    command_fn = {"start": container_cmd_start, "kill": container_cmd_kill, "list": container_cmd_list}
    return run_module_cmd(command_fn, "container", argv)


def run():
    module_fn = {"project": project_module, "container": container_module}
    program = os.path.basename(sys.argv[0])
    if len(sys.argv) < 3:
        usage(program)
        return
    module = sys.argv[1]
    fn = module_fn.get(module)
    if fn:
        result = fn(sys.argv[2:])
    else:
        print("ERROR: does not support module: {}".format(module))

if __name__ == "__main__":
    run()
